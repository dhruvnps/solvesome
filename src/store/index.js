import { createStore } from 'vuex'
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
} from "firebase/auth";
import { auth } from "@/firebase";
import DBService from "@/core/dbservice";
import { User } from "@/core/user";
import router from '@/router'

export const store = createStore({
  // store state
  state: {
    // current user object is initialized to null
    user: null,
    // authentication error message is set to default
    error: "",
  },
  getters: {
    // get current user object from store state
    getUser(state) {
      return state.user;
    },
    // get error message from store state
    getError(state) {
      return state.error;
    }
  },
  mutations: {
    // update store state with updated user object
    setUser(state, payload) {
      state.user = payload;
    },
    // set error message by parsing error using regex
    setError(state, payload) {
      state.error = /\(([^)]+)\)/
        .exec(payload)[0]
        .replace(/[\W_]+/g, " ")
        .replace('auth', '');
    }
  },
  actions: {
    /**
     * creates new user and updates the database accordingly
     */
    async signupAction({ commit }, payload) {
      try {
        // create user with firebase authentication
        await createUserWithEmailAndPassword(
          auth,
          // pass on the parameters passed to the action
          payload.email,
          payload.password
        );
        // goto home page
        router.push("/");
        // create user object with uid generated by auth instance
        var user = new User(payload.name, auth.currentUser.uid);
        // set store state with user object
        commit("setUser", user);
        // push user object to database via database service
        DBService.createUser(user);
      } catch (err) {
        // set error message if sign up failed
        commit("setError", err.message);
      }
    },

    /**
     * logs in existing user
     */
    async loginAction({ commit }, payload) {
      try {
        // login user with firebase authentication
        await signInWithEmailAndPassword(
          auth,
          // pass on the parameters passed to the action
          payload.email,
          payload.password
        );
        // goto home page
        router.push("/");
        // get user object of logged in user from database
        var user = await DBService.getUser(auth.currentUser.uid);
        // set store state with user object
        commit("setUser", user);
      } catch (err) {
        // set error message if sign up failed
        commit("setError", err.message);
      }
    },

    /**
     * logs out the currently logged in user
     */
    async logoutAction({ commit }) {
      // sign out with firebase authentication
      await signOut(auth);
      // goto login page
      router.push("/login");
      // set user object in store state to null
      commit("setUser", null);
    },

    /**
     * updates user object in store state when auth status changes
     */
    async authAction({ commit }) {
      // called whenever user authentication status changed
      await auth.onAuthStateChanged(async function (authUser) {
        if (authUser) {
          // if user is authenticated,
          // get user object from database and update store state
          var user = await DBService.getUser(authUser.uid);
          commit("setUser", user);
        } else {
          // if user is not authenticated,
          // set user object in store state to null
          commit("setUser", null);
        }
      });
    }
  },
})